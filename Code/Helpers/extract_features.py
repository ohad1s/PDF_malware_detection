import os
import PyPDF2
import cv2
from PIL import Image
from PyPDF2.generic import IndirectObject


class feature_extractor():

    def __init__(self, file_name: str, origin_class):
        self.file_name = file_name
        self.origin_class = origin_class
        self.features = []
        self.pdf_reader = PyPDF2.PdfReader(self.file_name)

    def one(self):

        # Get metadata size
        metadata = self.pdf_reader.metadata
        print(metadata)
        metadata_size = len((metadata))
        # Get number of pages
        pages = len(self.pdf_reader.pages)

        # Get title characters
        title = self.pdf_reader.metadata.title
        if title == None:
            title_characters = 0
        else:
            title_characters = len(title)

        # Close the PDF file
        file_size = os.path.getsize(self.file_name)
        file_name = os.path.basename(self.file_name)

        # Get the xref table
        xref_table = self.pdf_reader.xref

        # Get the length of the xref table
        print(xref_table)
        xref_length = len(xref_table)
        if self.pdf_reader.is_encrypted:
            enc = 1
        else:
            enc = 0

        trailer = self.pdf_reader.trailer
        if '/EmbeddedFiles' in trailer:
            embedded_files = 1
        else:
            embedded_files = 0

        self.features.append(file_name)
        self.features.append(file_size)
        self.features.append(metadata_size)
        self.features.append(pages)
        self.features.append(xref_length)
        self.features.append(title_characters)
        self.features.append(enc)
        self.features.append(embedded_files)
        # Print the extracted information
        print("File name: ", file_name)
        print("File size: ", file_size)
        print("Metadata size: ", metadata_size)
        print("Number of pages: ", pages)
        print("Xref Length: ", xref_length)
        print("Title characters: ", title_characters)
        print("isEncrypted: ", enc)
        print("Embedded_files:", embedded_files)

    def count_images_in_pdf(self):
        num_pages = len(self.pdf_reader.pages)
        image_count = 0

        for page_num in range(num_pages):
            page = self.pdf_reader.pages[page_num]
            if "/XObject" in page["/Resources"]:
                xobjects = page["/Resources"]["/XObject"].get_object()
                for obj in xobjects:
                    if xobjects[obj]["/Subtype"] == "/Image":
                        image_count += 1
        print("The PDF contains {} images".format(image_count))
        self.features.append(image_count)

    def is_text(self):
        for page in range(len(self.pdf_reader.pages)):
            if self.pdf_reader.pages[page].extract_text() != "":
                print("The PDF document has text.")
                self.features.append(1)
                break
        else:
            print("The PDF document does not have text.")
            self.features.append(0)

    def two(self):
        page = self.pdf_reader.pages[0]
        header = page.get("/Header")
        print("header is:", header)
        if header is None:
            self.features.append('a')
        else:
            self.features.append(header)

        obj_count = 0
        endobj_count = 0
        # Get the contents of the PDF as a string
        for i in range(len(self.pdf_reader.pages)):
            pdf_content = self.pdf_reader.pages[i].extract_text()
            # Count the number of obj keywords
            obj_count += pdf_content.count("obj")

            # Count the number of endobj keywords
            endobj_count += pdf_content.count("endobj")

        # Print the results
        print("Number of obj keywords:", obj_count)
        print("Number of endobj keywords:", endobj_count)
        self.features.append(obj_count)
        self.features.append(endobj_count)

        with open(self.file_name, 'rb') as f:
            contents = f.read()

        stream_count = contents.count(b'stream')
        endstream_count = contents.count(b'endstream')
        stream_count -= endstream_count
        print(f"Number of stream objects: {stream_count}")
        print(f"Number of endstream objects: {endstream_count}")
        self.features.append(stream_count)
        self.features.append(endstream_count)

        xref_count = contents.count(b'xref')
        startxref_count = contents.count(b'startxref')
        trailer_count = contents.count(b'trailer')
        xref_count -= startxref_count
        print("Number of xref keywords: ", xref_count)
        print("Number of startxref keywords: ", startxref_count)
        print("Number of trailer keywords: ", trailer_count)
        self.features.append(xref_count)
        self.features.append(trailer_count)
        self.features.append(startxref_count)

        p_no= len(self.pdf_reader.pages)
        print("pages number again: ", p_no)
        self.features.append(p_no)

    def is_jbig2decode_present(self):

        for i in range(len(self.pdf_reader.pages)):
            page = self.pdf_reader.pages[i]
            if '/Filter' in page:
                filters = page['/Filter']
                if '/JBIG2Decode' in filters:
                    return True
        return False

    def three(self):
        objstm_count = 0
        js_count = 0
        java_script_count=0
        AA_count=0
        OpenAction_count=0
        JBIG2COUNT=self.is_jbig2decode_present()
        JBig_count = 0
        if JBIG2COUNT:
            JBig_count+=1

        RichMedia_count=0
        launch_counter=0
        acroform_count = 0




        for i in range(len(self.pdf_reader.pages)):
            page = self.pdf_reader.pages[i]
            contents = page.extract_text().encode("utf-8")
            objstm_count += contents.count(b"ObjStm")
            if "/XObject" in page["/Resources"]:
                xobjects = page["/Resources"]["/XObject"].get_object()
                for obj in xobjects:
                    if "/JS" in obj:
                        js_count += 1
                    if "/Javascript" in obj:
                        java_script_count+=1

            # js_count += contents.count( b"JS")
            # java_script_count+=contents.count(b"Javascript")

            AA_count+=contents.count(b"AA")
            OpenAction_count+=contents.count(b"OpenAction")
            # if '/AcroForm' in page['/Annots']:


            annotations = page.get('/Annots')
            # Extract the dictionary from the IndirectObject instance
            if annotations is not None and isinstance(annotations, IndirectObject):
                annotations = annotations.get_object()

            # Check for the presence of the /AcroForm key in the dictionary
            if annotations is not None and '/AcroForm' in annotations:
                print('/AcroForm key found in annotations')
                acroform_count += 1
            else:
                print('/AcroForm key not found in annotations')


            # annotations = page.get('/Annots')
            # if annotations is not None and '/AcroForm' in annotations:
            #     acroform_count += 1
            RichMedia_count+=contents.count(b"RichMedia")
            launch_counter+=contents.count(b"launch")

        print("Number of ObjStm objects:", objstm_count)
        print("Number of JS:", js_count)
        print("Number of JavaScript scripts:", java_script_count)
        print("Number of AA:", AA_count)
        print("Number of OpenAction:", OpenAction_count)
        print("Number of Acroform:", acroform_count)
        print("Number of JBIG2Decode:", JBig_count)
        print("Number of RichMedia:" , RichMedia_count)
        print("Number of launch:" , launch_counter)

        self.features.append(objstm_count)
        self.features.append(js_count)
        self.features.append(java_script_count)
        self.features.append(AA_count)
        self.features.append(OpenAction_count)
        self.features.append(acroform_count)
        self.features.append(JBig_count)
        self.features.append(RichMedia_count)
        self.features.append(launch_counter)

    def get_average_embedded_file_size(self):

        trailer = self.pdf_reader.trailer
        embedded_files = trailer.get("/EmbeddedFiles", None)

        if embedded_files:
            size=0
            len=0
            for embedded_file in embedded_files:
                embedded_file_dict = embedded_file.getObject()
                embedded_file_stream = embedded_file_dict.get("/EF")
                embedded_file_size = len(embedded_file_stream.getData())
                print("Embedded file size:", embedded_file_size)
                size+=embedded_file_size
                len+=1
            print("AVG Embedded file size:", size/len)
            self.features.append(size/len)

        else:
            print("No embedded files found in PDF")
            self.features.append(0)

    def four(self):
        # Check if the PDF contains an XFA form
        if '/AcroForm' in self.pdf_reader.trailer['/Root']:
            # Get the AcroForm object
            acroform = self.pdf_reader.trailer['/Root']['/AcroForm']
            # Check if the AcroForm has an XFA field
            if '/XFA' in acroform:
                # Get the XFA field
                xfa = acroform['/XFA']
                # Count the number of XFA fields
                xfa_field_count = len(xfa)
                print('Number of XFA fields in PDF:', xfa_field_count)
                self.features.append(xfa_field_count)
        else:
            print('PDF does not contain an XFA form.')

        total_colors = 0
        for page_num in range(len(self.pdf_reader.pages)):
            page = self.pdf_reader.pages[page_num]

            # Get the resources for the page
            resources = page['/Resources']

            # Check if the page has a /ColorSpace dictionary
            if '/ColorSpace' in resources:
                color_space = resources['/ColorSpace']

                # Check if the /ColorSpace dictionary is a reference to an indirect object
                if isinstance(color_space, PyPDF2.PageObject):
                    color_space_dict = color_space.getObject()

                    # Check if the indirect object is a color space array
                    if isinstance(color_space_dict, list):
                        total_colors += len(color_space_dict)

        # Print the total number of colors
        print('Total Colors:', total_colors)
        self.features.append(total_colors)

    def main(self):
        self.one()
        self.count_images_in_pdf()
        self.is_text()
        self.two()
        self.three()
        self.get_average_embedded_file_size()
        self.four()
        self.check()

    def check(self):
        from pdfminer.pdfparser import PDFParser
        from pdfminer.pdfdocument import PDFDocument

        with open(self.file_name, 'rb') as fp:
            parser = PDFParser(fp)
            document = PDFDocument(parser)
            if "/JavaScript" in document.info:
                print("This PDF contains JavaScript code.")
                javascript = document.info["/JavaScript"]
                print("JavaScript code:", javascript)
            else:
                print("This PDF does not contain JavaScript code.")


feature_extractor_1 = feature_extractor(r"C:\Users\shira\Desktop\CV_Ohad_Shirazi_merged.pdf", 0)
# feature_extractor_1 = feature_extractor(r"C:\Users\shira\Desktop\8f9e084e-6189-403d-98b0-eba069ff715b_638119725442767339.PDF", 0)
# feature_extractor_1 = feature_extractor(r"C:\Users\shira\Desktop\3ff478c0-d6a6-448d-a3e2-daef3265bc4f_638064427345508734.pdf", 0)
feature_extractor_2= feature_extractor("../pdfs/mal_dummy.pdf", 1)

feature_extractor_1.main()
print("--------------------------------------")
feature_extractor_2.main()
