import os
import PyPDF2
from subprocess import Popen, PIPE
import pdfid
from Reduce_Bytes import reduce_bytes

class Feature_Extractor():
    def __init__(self,file_name):
        self.file_name=file_name
        self.features = []
        self.pdf_reader = PyPDF2.PdfReader(self.file_name)
        self.pdfid_features=self.feature_extraction_with_pdfid()
        self.features_from_pdfid= ['Header','obj',
                'endobj',
                'stream',
                'endstream',
                'xref',
                'trailer',
                'startxref',
                '/Page',
                '/Encrypt',
                '/ObjStm',
                '/JS',
                '/JavaScript',
                '/AA',
                '/OpenAction',
                '/AcroForm',
                '/JBIG2Decode',
                '/RichMedia',
                '/Launch',
                '/EmbeddedFile',
                '/XFA',
                '/Colors'
               ]

    def feature_extraction_with_pdfid(self):
        features = []
        command_to_execute = 'python3 pdfid.py ' + self.file_name
        stdout = Popen(command_to_execute, shell=True, stdout=PIPE).stdout
        output = stdout.readlines()
        if len(output) == 24:
            features.append(reduce_bytes(output))
        return features



    def file_basic_data(self):
        file_size = os.path.getsize(self.file_name)
        file_name = os.path.basename(self.file_name)
        print("file name is:", file_name)
        print("file size is:", file_size)
        self.features.append(file_name)
        self.features.append(file_size)

        metadata = self.pdf_reader.metadata
        # print(metadata)
        metadata_size = len((metadata))
        print("metadata size is:", metadata_size)
        self.features.append(metadata_size)

        pages = len(self.pdf_reader.pages)
        print("Num of pages:" ,pages)
        self.features.append(pages)

        xref_table = self.pdf_reader.xref
        # print(xref_table)
        xref_length = len(xref_table)-1
        print("xref table len is:",xref_length)
        self.features.append(xref_length)

        title = self.pdf_reader.metadata.title
        if title == None:
            title_characters = 0
        else:
            title_characters = len(title)
        print(title)
        print("Title len:", title_characters)
        self.features.append(title_characters)

        if self.pdf_reader.is_encrypted:
            enc = 1
        else:
            enc = 0
        print("is encrypted:",enc)
        self.features.append(enc)


    def EmbeddedFile(self):
        self.helper_to_pdfdi('/EmbeddedFile')


    def count_images_in_pdf(self):
        num_pages = len(self.pdf_reader.pages)
        image_count = 0

        for page_num in range(num_pages):
            page = self.pdf_reader.pages[page_num]
            if "/XObject" in page["/Resources"]:
                xobjects = page["/Resources"]["/XObject"].get_object()
                for obj in xobjects:
                    if xobjects[obj]["/Subtype"] == "/Image":
                        image_count += 1
        print("The PDF contains {} images".format(image_count))
        self.features.append(image_count)

    def is_text(self):
        for page in range(len(self.pdf_reader.pages)):
            if self.pdf_reader.pages[page].extract_text() != "":
                print("The PDF document has text.")
                self.features.append(1)
                break
        else:
            print("The PDF document does not have text.")
            self.features.append(0)

    def more_features_from_pdfid(self):
        for arg in self.features_from_pdfid:
                self.helper_to_pdfdi(arg)

    def helper_to_pdfdi(self, arg):
        arg_index=self.features_from_pdfid.index(arg)
        # print(arg_index)
        # print(self.pdfid_features)
        arg_count= self.pdfid_features[0][arg_index]
        print(f"{arg} :", arg_count)
        self.features.append(arg_count)

    def main(self):
        self.file_basic_data()
        self.EmbeddedFile()
        self.count_images_in_pdf()
        self.is_text()
        self.more_features_from_pdfid()
        return self.features

f1=Feature_Extractor("pdfs/JavaScriptClock.pdf")
f1.main()

