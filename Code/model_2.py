import joblib
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import recall_score, f1_score, accuracy_score
# Load the data into a pandas dataframe
df = pd.read_csv('../dataSet/PDF_ML_DataSet.csv')

# Replace NaN values with the mean of the column
df.fillna(df.mean(), inplace=True)
for column in df.columns[df.isna().any()].tolist():
    # df.drop(column, axis=1, inplace=True)
    df[column] = df[column].fillna('None')

# Separate the target column from the rest of the data
y = df['Label']  # Assuming the target column is named 'encrypt'
X = df.drop('Label', axis=1)
X = X.drop('FileName', axis=1)
X = X.drop('Header', axis=1)
X = X.drop('Colors', axis=1)



to_extract=["obj","endobj","stream","endstream","xref","trailer","startxref","pageno","encrypt","ObjStm",
            "JS","Javascript","AA","OpenAction","Acroform","JBIG2Decode","RichMedia","launch","EmbeddedFile","XFA","Colors",
            "pdfsize", "metadata size", "pages", "xref Length", "title characters", "isEncrypted", "embedded files", "images"]


# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)

# Fit a random forest classifier to the data
clf = RandomForestClassifier(n_estimators=1000)
# clf = AdaBoostClassifier(n_estimators=1000, random_state=42)
clf.fit(X_train, y_train)
joblib.dump(clf, 'random_forest.pkl')
# joblib.dump(clf, 'AdaBoostClassifier.pkl')

# Evaluate the classifier on the test data
y_pred = clf.predict(X_test)

# Print the confusion matrix
conf_matrix = pd.crosstab(index=y_test, columns=y_pred, rownames=['Actual'], colnames=['Predicted'])
print("Confusion matrix:\n")
print(conf_matrix)

recall = recall_score(y_test, y_pred, average='weighted')
print("Recall: {:.4f}".format(recall))

# Print the f1 score
f1 = f1_score(y_test, y_pred, average='weighted')
print("F1 score: {:.4f}".format(f1))

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy: {:.4f}".format(accuracy))